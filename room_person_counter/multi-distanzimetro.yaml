esphome:
  name: multi-distanzimetro
  friendly_name: multi-distanzimetro

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "<YOUR API KEY>"

ota:
  - platform: esphome
    password: "<YOUR PASSWORD>"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Multi-Distanzimetro"
    password: "<YOUR PASSWORD>"

captive_portal:



# Example configuration entry for ESP32
i2c:
  sda: GPIO8
  scl: GPIO9
  scan: true
  id: bus_a

sensor:
  - platform: vl53l0x
    name: "distance1"
    id: distance1
    address: 0x41
    enable_pin: GPIO6
    timeout: 200us
    update_interval: 200ms
    unit_of_measurement: "m"
    long_range: False
    internal: True
          

  - platform: vl53l0x
    name: "distance2"
    id: distance2
    address: 0x42
    enable_pin: GPIO7
    timeout: 200us
    update_interval: 200ms
    unit_of_measurement: "m"
    long_range: False
    internal: True

text_sensor: #stati possibili: entrata, uscita, stand-by
  - platform: template
    name: "stato"
    id: status
        

binary_sensor:
  - platform: template
    internal: True
    name: "sensore 1"
    id: sensore_1
    lambda: |- 
      if(id(distance1).state < 1){
        return true;}
      else {
          return false;}
    filters: 
      - delayed_off: 1s
    on_state: 
      then:
        - lambda: |-
            if(id(sensore_1).state && !id(sensore_2).state) id(status).publish_state("ingresso");
        - delay: 1s
        - lambda: |-
            id(status).publish_state("stand-by");

            
                  
            
  - platform: template
    internal: True
    name: "sensore 2"
    id: sensore_2
    lambda: |- 
      if(id(distance2).state < 0.55){
        return true;}
      else {
          return false;}
    filters: 
      - delayed_off: 1s
    on_state: 
      then:
        - lambda: |-
            if(id(sensore_2).state && !id(sensore_1).state) id(status).publish_state("uscita");
        - delay: 1s
        - lambda: |-
            id(status).publish_state("stand-by");


    
